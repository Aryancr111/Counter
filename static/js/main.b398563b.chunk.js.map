{"version":3,"sources":["Components/Buttons/index.jsx","Components/Counter/CounterComponent.jsx","Components/Counter/index.jsx","Components/Counter/reducerhook.js","App.js","reportWebVitals.js","index.js"],"names":["Button","label","width","height","color","backgroundColor","borderWidth","borderStyle","borderColor","onClick","disabled","colors","primary","secondary","tertiary","buttonStyles","cursor","style","CounterComponent","value","max","handleDecrement","handleIncrement","onChange","className","type","Counter","count","initialState","reducer","state","action","newCount","App","initialValue","initialValues","useReducer","useCounter","counter","dispatchCounter","e","target","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.b398563b.chunk.js","sourcesContent":["import { bool, func, number, oneOf, oneOfType, string } from \"prop-types\";\n\nconst Button = ({\n  label = \"\",\n  width = 60,\n  height = \"100%\",\n  color = \"primary\",\n  backgroundColor = \"tertiary\",\n  borderWidth = 1,\n  borderStyle = \"solid\",\n  borderColor = \"primary\",\n  onClick = () => {},\n  disabled = false,\n}) => {\n  const colors = {\n    primary: \"primary\",\n    secondary: \"secondary\",\n    tertiary: \"tertiary\",\n  };\n\n  const buttonStyles = {\n    width,\n    height,\n    cursor: disabled ? \"auto\" : \"pointer\",\n    borderWidth,\n    borderStyle,\n    borderColor: `var(--${colors[borderColor]}-color)`,\n    color: `var(--${colors[color]}-color)`,\n    backgroundColor: `var(--${colors[backgroundColor]}-color)`,\n  };\n\n  return (\n    <button style={buttonStyles} onClick={onClick} disabled={disabled}>\n      {label}\n    </button>\n  );\n};\n\nButton.propTypes = {\n  label: string,\n  width: oneOfType([string, number]),\n  height: oneOfType([string, number]),\n  color: oneOf([\"primary\", \"secondary\", \"tertiary\"]),\n  backgroundColor: oneOf([\"primary\", \"secondary\", \"tertiary\"]),\n  borderWidth: oneOfType([string, number]),\n  borderStyle: string,\n  borderColor: oneOf([\"primary\", \"secondary\", \"tertiary\"]),\n  onClick: func,\n  disabled: bool,\n};\n\nexport default Button;\n","import { number, func } from \"prop-types\";\n\nimport Button from \"../Buttons\";\nimport \"./counterstyle.css\";\n\nconst CounterComponent = ({\n  value = 1,\n  max = 1000,\n  handleDecrement = () => {}, //handles decrement\n  handleIncrement = () => {}, // handles increment\n  onChange = () => {}, \n}) => (\n  <div className=\"counter\">\n    <Button\n      label=\"-\"\n      width={60}\n      height={56}\n      color=\"primary\"\n      backgroundColor=\"tertiary\"\n      borderWidth=\"0 1px 0 0\"\n      borderColor=\"primary\"\n      onClick={handleDecrement}\n    />\n    <input\n      type=\"number\"\n      className=\"count-input\"\n      aria-label=\"Count\"\n      value={value}\n      max={max}\n      onChange={onChange} //on change used for user input\n    />\n    <Button\n      label=\"+\"\n      width={60}\n      height={56}\n      color=\"tertiary\"\n      backgroundColor=\"primary\"\n      borderWidth=\"0 0 0 1px\"\n      borderColor=\"primary\"\n      disabled={value === max}\n      onClick={handleIncrement}\n    />\n  </div>\n);\n\nCounterComponent.propTypes = {\n  value: number,\n  max: number,\n  handleDecrement: func,\n  handleIncrement: func,\n  onChange: func,\n};\n\nexport default CounterComponent;\n","import { number } from \"prop-types\";\n\nimport CounterComponent from \"./CounterComponent\";\n\nconst Counter = ({\n  count = 1,\n  max = 1000,\n  handleDecrement = () => {},\n  handleIncrement = () => {},\n  onChange = () => {},\n}) => {\n  return (\n    <CounterComponent\n      value={count}\n      max={max}\n      handleDecrement={handleDecrement}\n      handleIncrement={handleIncrement}\n      onChange={onChange}\n    />\n  );\n};\n\nCounter.propTypes = {\n  initialValue: number,\n  max: number,\n};\n\nexport default Counter;\n","import { useReducer } from \"react\";\n// importing useReducer hook to handle state transitions\n\nconst initialState = { count: 1, max: 1000 };\n\nfunction reducer(state, action) {\n  switch (action.type) {\n    case \"increment\":\n      const newCount = state.count + 1; //handles the increment\n      return {\n        ...state,\n        count: newCount <= state.max ? newCount : state.count,\n      };\n      //need to spread state to make accurate state change\n    case \"decrement\":\n      return { ...state, count: state.count - 1 }; //handles the decrement\n      //need to spread state to make accurate state change\n    case \"absolute\":\n      return {\n        ...state,\n        count: +action.value <= state.max ? +action.value : state.count,\n      };\n    default:\n      return state;\n  }\n}\n\nexport default function useCounter(initialValues) {\n  const [state, dispatch] = useReducer(reducer, {\n    ...initialState,\n    ...initialValues,\n  });\n  return [state, dispatch];\n}\n","\nimport Counter from \"./Components/Counter\";\n//Counter component is imported from our Componenets folder\nimport useCounter from \"./Components/Counter/reducerhook\";\n//useReducer hook to handle increment, decrement and to fetch user value\nimport \"./App.css\";\n//styling of the application\n\nfunction App({ initialValue = 1, max = 1000 }) {\n  const [counter, dispatchCounter] = useCounter({ count: initialValue, max });\n \n  const handleIncrement = () => dispatchCounter({ type: \"increment\" });\n  const handleDecrement = () => dispatchCounter({ type: \"decrement\" });\n  const onChange = e =>\n    dispatchCounter({ type: \"absolute\", value: e.target.value }); \n\n  return (\n    <div className=\"App\">\n      <div className=\"wrapper\">\n        <Counter\n          count={counter.count}\n          max={counter.max}\n          handleDecrement={handleDecrement}\n          handleIncrement={handleIncrement}\n          onChange={onChange}\n        />\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}